generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(CASHIER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]

  @@map("users")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     Item[]

  @@map("categories")
}

model Item {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  price       Float
  stock       Int        @default(0)
  categoryId  Int
  emoji       String?
  image       String?    // Store image filename or URL
  imageType   String?    // 'upload' or 'url'
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  category    Category   @relation(fields: [categoryId], references: [id])
  saleItems   SaleItem[]

  @@map("items")
}

model Sale {
  id              Int           @id @default(autoincrement())
  total           Float
  userId          Int
  paymentMethodId Int
  tableId         Int?
  status          SaleStatus    @default(COMPLETED)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  items           SaleItem[]
  user            User          @relation(fields: [userId], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  table           Table?        @relation(fields: [tableId], references: [id])

  @@map("sales")
}

model SaleItem {
  id       Int   @id @default(autoincrement())
  quantity Int
  price    Float
  saleId   Int
  itemId   Int
  item     Item  @relation(fields: [itemId], references: [id])
  sale     Sale  @relation(fields: [saleId], references: [id])

  @@map("sale_items")
}

enum UserRole {
  ADMIN
  CASHIER
}

enum SaleStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

model Settings {
  id               Int      @id @default(autoincrement())
  currency         String   @default("IDR")
  currencySymbol   String   @default("Rp")
  taxEnabled       Boolean  @default(false)
  taxRate          Float    @default(0.0)
  taxName          String   @default("Tax")
  tableCount       Int      @default(6)
  appName          String   @default("POS System Restaurant Management")
  logoPath         String?  // Path to uploaded logo file
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("settings")
}

model PaymentMethod {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]

  @@map("payment_methods")
}

model Table {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  capacity  Int      @default(4)
  status    String   @default("available") // "available", "occupied", "reserved"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]

  @@map("tables")
}

model RolePermission {
  id         Int      @id @default(autoincrement())
  role       UserRole
  resource   String   // e.g., 'dashboard', 'items', 'sales', 'categories', 'users', 'settings', 'tables'
  canView    Boolean  @default(false)
  canCreate  Boolean  @default(false)
  canEdit    Boolean  @default(false)
  canDelete  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([role, resource])
  @@map("role_permissions")
}
